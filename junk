import React, { useState } from "react";
import { FaPlus, FaMinus } from "react-icons/fa";
import { DndProvider, useDrag, useDrop } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";

// Define a constant type for drag-and-drop
const ItemType = "INPUT_FIELD";

const InputBox = ({ input, index, moveInputField, removeInputField, handleInputChange }) => {
  const ref = React.useRef(null);

  // Drag logic for the input box
  const [{ isDragging }, drag] = useDrag({
    type: ItemType,
    item: { index },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  // Drop logic for reordering
  const [, drop] = useDrop({
    accept: ItemType,
    hover: (item) => {
      if (item.index !== index) {
        moveInputField(item.index, index);
        item.index = index; // Update the dragged item's index after moving
      }
    },
  });

  // Connect drag and drop to the ref
  drag(drop(ref));

  return (
    <div
      ref={ref}
      style={{
        display: "flex",
        alignItems: "center",
        marginBottom: "10px",
        opacity: isDragging ? 0.5 : 1, // Opacity change while dragging
      }}
    >
      <input
        type="text"
        value={input}
        onChange={(event) => handleInputChange(index, event)}
        placeholder={`Input box ${index + 1}`}
        style={{ marginRight: "10px" }}
      />
      <FaMinus
        onClick={() => removeInputField(index)}
        style={{ cursor: "pointer", marginRight: "10px", color: "red" }}
        title="Remove"
      />
    </div>
  );
};

const DynamicInputBoxes = () => {
  const [inputFields, setInputFields] = useState([""]);

  // Move input field when dragged
  const moveInputField = (fromIndex, toIndex) => {
    const updatedFields = [...inputFields];
    const [removed] = updatedFields.splice(fromIndex, 1); // Remove the dragged element
    updatedFields.splice(toIndex, 0, removed); // Insert it at the new position
    setInputFields(updatedFields);
  };

  // Add a new input box at the end
  const addInputField = () => {
    setInputFields([...inputFields, ""]);
  };

  // Remove a specific input box
  const removeInputField = (index) => {
    const fields = [...inputFields];
    fields.splice(index, 1); // Remove input field at the specified index
    setInputFields(fields);
  };

  // Handle input value change
  const handleInputChange = (index, event) => {
    const fields = [...inputFields];
    fields[index] = event.target.value; // Update input value
    setInputFields(fields);
  };

  return (
    <DndProvider backend={HTML5Backend}>
      {inputFields.map((input, index) => (
        <InputBox
          key={index}
          index={index}
          input={input}
          moveInputField={moveInputField}
          removeInputField={removeInputField}
          handleInputChange={handleInputChange}
        />
      ))}
      <div style={{ display: "flex", alignItems: "center", marginTop: "10px" }}>
        <FaPlus
          onClick={addInputField}
          style={{ cursor: "pointer", color: "green", fontSize: "1.5em" }}
          title="Add New Input Box"
        />
      </div>
    </DndProvider>
  );
};

export default DynamicInputBoxes;
